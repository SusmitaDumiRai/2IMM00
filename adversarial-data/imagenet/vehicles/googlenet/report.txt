nb_test: 40
correct: 16
correct_fgm: 0
correct_pgd: 1
correct_l2: 0
correct_hop_skip: 0
correct_noise: 14
correct_semantic: 5
correct_l1: 15
correct_spsa: 0
y_pred: [tensor([646], device='cuda:0'), tensor([675], device='cuda:0'), tensor([847], device='cuda:0'), tensor([781], device='cuda:0'), tensor([314], device='cuda:0'), tensor([627], device='cuda:0'), tensor([468], device='cuda:0'), tensor([468], device='cuda:0'), tensor([802], device='cuda:0'), tensor([554], device='cuda:0'), tensor([913], device='cuda:0'), tensor([627], device='cuda:0'), tensor([847], device='cuda:0'), tensor([625], device='cuda:0'), tensor([468], device='cuda:0'), tensor([781], device='cuda:0'), tensor([484], device='cuda:0'), tensor([847], device='cuda:0'), tensor([802], device='cuda:0'), tensor([817], device='cuda:0'), tensor([436], device='cuda:0'), tensor([468], device='cuda:0'), tensor([148], device='cuda:0'), tensor([593], device='cuda:0'), tensor([810], device='cuda:0'), tensor([536], device='cuda:0'), tensor([627], device='cuda:0'), tensor([741], device='cuda:0'), tensor([802], device='cuda:0'), tensor([468], device='cuda:0'), tensor([450], device='cuda:0'), tensor([62], device='cuda:0'), tensor([468], device='cuda:0'), tensor([450], device='cuda:0'), tensor([871], device='cuda:0'), tensor([757], device='cuda:0'), tensor([882], device='cuda:0'), tensor([751], device='cuda:0'), tensor([609], device='cuda:0'), tensor([627], device='cuda:0')]
y_pred_fgm: [tensor([565], device='cuda:0'), tensor([530], device='cuda:0'), tensor([892], device='cuda:0'), tensor([533], device='cuda:0'), tensor([475], device='cuda:0'), tensor([436], device='cuda:0'), tensor([627], device='cuda:0'), tensor([734], device='cuda:0'), tensor([214], device='cuda:0'), tensor([654], device='cuda:0'), tensor([554], device='cuda:0'), tensor([742], device='cuda:0'), tensor([724], device='cuda:0'), tensor([472], device='cuda:0'), tensor([609], device='cuda:0'), tensor([767], device='cuda:0'), tensor([674], device='cuda:0'), tensor([408], device='cuda:0'), tensor([76], device='cuda:0'), tensor([848], device='cuda:0'), tensor([466], device='cuda:0'), tensor([609], device='cuda:0'), tensor([558], device='cuda:0'), tensor([608], device='cuda:0'), tensor([741], device='cuda:0'), tensor([830], device='cuda:0'), tensor([656], device='cuda:0'), tensor([67], device='cuda:0'), tensor([439], device='cuda:0'), tensor([933], device='cuda:0'), tensor([62], device='cuda:0'), tensor([289], device='cuda:0'), tensor([656], device='cuda:0'), tensor([665], device='cuda:0'), tensor([847], device='cuda:0'), tensor([835], device='cuda:0'), tensor([891], device='cuda:0'), tensor([724], device='cuda:0'), tensor([867], device='cuda:0'), tensor([742], device='cuda:0')]
y_pred_pgd: [tensor([713], device='cuda:0'), tensor([530], device='cuda:0'), tensor([448], device='cuda:0'), tensor([538], device='cuda:0'), tensor([475], device='cuda:0'), tensor([656], device='cuda:0'), tensor([482], device='cuda:0'), tensor([407], device='cuda:0'), tensor([244], device='cuda:0'), tensor([627], device='cuda:0'), tensor([554], device='cuda:0'), tensor([620], device='cuda:0'), tensor([870], device='cuda:0'), tensor([472], device='cuda:0'), tensor([482], device='cuda:0'), tensor([662], device='cuda:0'), tensor([333], device='cuda:0'), tensor([408], device='cuda:0'), tensor([29], device='cuda:0'), tensor([734], device='cuda:0'), tensor([482], device='cuda:0'), tensor([575], device='cuda:0'), tensor([12], device='cuda:0'), tensor([481], device='cuda:0'), tensor([586], device='cuda:0'), tensor([871], device='cuda:0'), tensor([656], device='cuda:0'), tensor([646], device='cuda:0'), tensor([439], device='cuda:0'), tensor([482], device='cuda:0'), tensor([891], device='cuda:0'), tensor([847], device='cuda:0'), tensor([482], device='cuda:0'), tensor([621], device='cuda:0'), tensor([586], device='cuda:0'), tensor([717], device='cuda:0'), tensor([891], device='cuda:0'), tensor([833], device='cuda:0'), tensor([867], device='cuda:0'), tensor([742], device='cuda:0')]
y_pred_l2: []
y_pred_hop_skip: []
y_pred_noise: [tensor([646], device='cuda:0'), tensor([530], device='cuda:0'), tensor([847], device='cuda:0'), tensor([781], device='cuda:0'), tensor([475], device='cuda:0'), tensor([627], device='cuda:0'), tensor([468], device='cuda:0'), tensor([468], device='cuda:0'), tensor([802], device='cuda:0'), tensor([554], device='cuda:0'), tensor([554], device='cuda:0'), tensor([627], device='cuda:0'), tensor([847], device='cuda:0'), tensor([625], device='cuda:0'), tensor([751], device='cuda:0'), tensor([781], device='cuda:0'), tensor([484], device='cuda:0'), tensor([847], device='cuda:0'), tensor([450], device='cuda:0'), tensor([751], device='cuda:0'), tensor([436], device='cuda:0'), tensor([468], device='cuda:0'), tensor([94], device='cuda:0'), tensor([593], device='cuda:0'), tensor([586], device='cuda:0'), tensor([536], device='cuda:0'), tensor([627], device='cuda:0'), tensor([646], device='cuda:0'), tensor([802], device='cuda:0'), tensor([468], device='cuda:0'), tensor([450], device='cuda:0'), tensor([586], device='cuda:0'), tensor([468], device='cuda:0'), tensor([450], device='cuda:0'), tensor([403], device='cuda:0'), tensor([757], device='cuda:0'), tensor([882], device='cuda:0'), tensor([408], device='cuda:0'), tensor([609], device='cuda:0'), tensor([627], device='cuda:0')]
y_pred_semantic: [tensor([807], device='cuda:0'), tensor([891], device='cuda:0'), tensor([710], device='cuda:0'), tensor([741], device='cuda:0'), tensor([431], device='cuda:0'), tensor([627], device='cuda:0'), tensor([750], device='cuda:0'), tensor([468], device='cuda:0'), tensor([901], device='cuda:0'), tensor([660], device='cuda:0'), tensor([913], device='cuda:0'), tensor([713], device='cuda:0'), tensor([847], device='cuda:0'), tensor([718], device='cuda:0'), tensor([549], device='cuda:0'), tensor([637], device='cuda:0'), tensor([565], device='cuda:0'), tensor([847], device='cuda:0'), tensor([669], device='cuda:0'), tensor([751], device='cuda:0'), tensor([435], device='cuda:0'), tensor([751], device='cuda:0'), tensor([726], device='cuda:0'), tensor([593], device='cuda:0'), tensor([741], device='cuda:0'), tensor([871], device='cuda:0'), tensor([436], device='cuda:0'), tensor([741], device='cuda:0'), tensor([562], device='cuda:0'), tensor([590], device='cuda:0'), tensor([840], device='cuda:0'), tensor([62], device='cuda:0'), tensor([436], device='cuda:0'), tensor([408], device='cuda:0'), tensor([669], device='cuda:0'), tensor([546], device='cuda:0'), tensor([882], device='cuda:0'), tensor([847], device='cuda:0'), tensor([609], device='cuda:0'), tensor([830], device='cuda:0')]
y_pred_l1: [tensor([646], device='cuda:0'), tensor([675], device='cuda:0'), tensor([479], device='cuda:0'), tensor([860], device='cuda:0'), tensor([314], device='cuda:0'), tensor([627], device='cuda:0'), tensor([468], device='cuda:0'), tensor([468], device='cuda:0'), tensor([802], device='cuda:0'), tensor([554], device='cuda:0'), tensor([554], device='cuda:0'), tensor([627], device='cuda:0'), tensor([847], device='cuda:0'), tensor([625], device='cuda:0'), tensor([717], device='cuda:0'), tensor([468], device='cuda:0'), tensor([484], device='cuda:0'), tensor([847], device='cuda:0'), tensor([802], device='cuda:0'), tensor([817], device='cuda:0'), tensor([436], device='cuda:0'), tensor([468], device='cuda:0'), tensor([814], device='cuda:0'), tensor([593], device='cuda:0'), tensor([860], device='cuda:0'), tensor([484], device='cuda:0'), tensor([627], device='cuda:0'), tensor([646], device='cuda:0'), tensor([802], device='cuda:0'), tensor([675], device='cuda:0'), tensor([450], device='cuda:0'), tensor([634], device='cuda:0'), tensor([468], device='cuda:0'), tensor([802], device='cuda:0'), tensor([403], device='cuda:0'), tensor([757], device='cuda:0'), tensor([882], device='cuda:0'), tensor([408], device='cuda:0'), tensor([609], device='cuda:0'), tensor([627], device='cuda:0')]
y_pred_spsa: []
time: [0.03600358963012695, 0.6539969444274902, 0.005999565124511719, 0.006000518798828125, 0.2649998664855957, 0.02900099754333496, 0.6289994716644287, 0.006000041961669922, 0.0070002079010009766, 0.26400065422058105, 0.02900218963623047, 0.6320347785949707, 0.007000923156738281, 0.006999015808105469, 0.2630009651184082, 0.029001951217651367, 0.6289989948272705, 0.0069997310638427734, 0.0060007572174072266, 0.2760300636291504, 0.030000925064086914, 0.6515147686004639, 0.006000518798828125, 0.0060002803802490234, 0.2689995765686035, 0.03000044822692871, 0.6390001773834229, 0.00700068473815918, 0.006999015808105469, 0.26600027084350586, 0.028998374938964844, 0.6429998874664307, 0.007001161575317383, 0.0060007572174072266, 0.26599884033203125, 0.028998613357543945, 0.6410007476806641, 0.006999492645263672, 0.00599980354309082, 0.26199960708618164, 0.02899932861328125, 0.6319992542266846, 0.006999969482421875, 0.006999969482421875, 0.26600027084350586, 0.029001712799072266, 0.653998613357544, 0.008000373840332031, 0.007000923156738281, 0.27699899673461914, 0.027998924255371094, 0.6440000534057617, 0.0070018768310546875, 0.006998300552368164, 0.2670001983642578, 0.027999401092529297, 0.6349985599517822, 0.00599980354309082, 0.005999565124511719, 0.2649998664855957, 0.029000043869018555, 0.6400001049041748, 0.006999969482421875, 0.00599980354309082, 0.26600098609924316, 0.028998374938964844, 0.6460001468658447, 0.005999565124511719, 0.007000446319580078, 0.2689998149871826, 0.029000520706176758, 0.6309990882873535, 0.007001161575317383, 0.00699925422668457, 0.2669997215270996, 0.029000043869018555, 0.6359999179840088, 0.006999969482421875, 0.006001472473144531, 0.2720003128051758, 0.03000020980834961, 0.6760015487670898, 0.006000518798828125, 0.00699925422668457, 0.2670018672943115, 0.03099822998046875, 0.6809990406036377, 0.007001399993896484, 0.0069997310638427734, 0.27300190925598145, 0.028998374938964844, 0.6790001392364502, 0.007001638412475586, 0.005999088287353516, 0.2709996700286865, 0.027997970581054688, 0.679999828338623, 0.005999088287353516, 0.007001161575317383, 0.2709989547729492, 0.03099989891052246, 0.6800000667572021, 0.00599980354309082, 0.00599980354309082, 0.2700002193450928, 0.03000044822692871, 0.6555163860321045, 0.006000518798828125, 0.005999088287353516, 0.2700009346008301, 0.03499913215637207, 0.683997392654419, 0.007000923156738281, 0.00699925422668457, 0.2820005416870117, 0.030000686645507812, 0.6549956798553467, 0.005999565124511719, 0.007000446319580078, 0.26400113105773926, 0.029000282287597656, 0.6289999485015869, 0.005999326705932617, 0.006000041961669922, 0.26400136947631836, 0.02900075912475586, 0.6369993686676025, 0.006000041961669922, 0.005999565124511719, 0.2650017738342285, 0.03099989891052246, 0.633044958114624, 0.007000446319580078, 0.005999565124511719, 0.26199960708618164, 0.02899909019470215, 0.6449999809265137, 0.00599980354309082, 0.006000041961669922, 0.2634267807006836, 0.027999401092529297, 0.6360011100769043, 0.0059986114501953125, 0.006002664566040039, 0.26600098609924316, 0.029999971389770508, 0.6330001354217529, 0.00599980354309082, 0.006000041961669922, 0.26599979400634766, 0.030001163482666016, 0.6320321559906006, 0.00599980354309082, 0.005999088287353516, 0.2630002498626709, 0.028998613357543945, 0.6290767192840576, 0.007002830505371094, 0.0059986114501953125, 0.2629985809326172, 0.028999805450439453, 0.6320016384124756, 0.0059986114501953125, 0.006001710891723633, 0.26199841499328613, 0.029000043869018555, 0.6280002593994141, 0.0060002803802490234, 0.005999326705932617, 0.26200032234191895, 0.02899765968322754, 0.636000394821167, 0.00599980354309082, 0.0059986114501953125, 0.26400065422058105, 0.029000043869018555, 0.6310000419616699, 0.0060002803802490234, 0.005998849868774414, 0.26400089263916016, 0.030001163482666016, 0.6329984664916992, 0.0060002803802490234, 0.00599980354309082, 0.26600027084350586, 0.028998613357543945, 0.6470024585723877, 0.006998538970947266, 0.006002187728881836, 0.2709991931915283, 0.03000020980834961, 0.6399993896484375, 0.005999565124511719, 0.006999969482421875, 0.26200079917907715, 0.0279998779296875, 0.6290006637573242, 0.00599980354309082, 0.006000995635986328, 0.2629992961883545]
funcs_tested: 0
test acc on clean examples (%): 40.00
test acc on FGM adversarial examples (%): 0.00
test acc on PGD adversarial examples (%): 2.50
test acc on L2 adversarial examples (%): 0.00
test acc on HOP-SKIP-JUMP adversarial examples (%): 0.00
test acc on NOISE adversarial examples (%): 35.00
test acc on SEMANTIC adversarial examples (%): 12.50
test acc on L1 adversarial examples (%): 37.50
test acc on SPSA adversarial examples (%): 0.00
