nb_test: 40
correct: 17
correct_fgm: 6
correct_pgd: 1
correct_l2: 0
correct_hop_skip: 0
correct_noise: 17
correct_semantic: 15
correct_l1: 17
correct_spsa: 0
y_pred: [tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([198], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([157], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([284], device='cuda:0'), tensor([281], device='cuda:0'), tensor([377], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([284], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0')]
y_pred_fgm: [tensor([285], device='cuda:0'), tensor([434], device='cuda:0'), tensor([287], device='cuda:0'), tensor([719], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([330], device='cuda:0'), tensor([281], device='cuda:0'), tensor([283], device='cuda:0'), tensor([284], device='cuda:0'), tensor([284], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([794], device='cuda:0'), tensor([338], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([374], device='cuda:0'), tensor([287], device='cuda:0'), tensor([281], device='cuda:0'), tensor([887], device='cuda:0'), tensor([283], device='cuda:0'), tensor([287], device='cuda:0'), tensor([377], device='cuda:0'), tensor([285], device='cuda:0'), tensor([287], device='cuda:0'), tensor([333], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([259], device='cuda:0'), tensor([154], device='cuda:0'), tensor([377], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([377], device='cuda:0')]
y_pred_pgd: [tensor([828], device='cuda:0'), tensor([435], device='cuda:0'), tensor([287], device='cuda:0'), tensor([431], device='cuda:0'), tensor([285], device='cuda:0'), tensor([331], device='cuda:0'), tensor([330], device='cuda:0'), tensor([288], device='cuda:0'), tensor([283], device='cuda:0'), tensor([245], device='cuda:0'), tensor([570], device='cuda:0'), tensor([283], device='cuda:0'), tensor([292], device='cuda:0'), tensor([897], device='cuda:0'), tensor([337], device='cuda:0'), tensor([285], device='cuda:0'), tensor([965], device='cuda:0'), tensor([377], device='cuda:0'), tensor([287], device='cuda:0'), tensor([570], device='cuda:0'), tensor([476], device='cuda:0'), tensor([299], device='cuda:0'), tensor([285], device='cuda:0'), tensor([197], device='cuda:0'), tensor([151], device='cuda:0'), tensor([287], device='cuda:0'), tensor([333], device='cuda:0'), tensor([797], device='cuda:0'), tensor([276], device='cuda:0'), tensor([630], device='cuda:0'), tensor([805], device='cuda:0'), tensor([516], device='cuda:0'), tensor([739], device='cuda:0'), tensor([259], device='cuda:0'), tensor([377], device='cuda:0'), tensor([377], device='cuda:0'), tensor([332], device='cuda:0'), tensor([965], device='cuda:0'), tensor([281], device='cuda:0'), tensor([287], device='cuda:0')]
y_pred_l2: []
y_pred_hop_skip: []
y_pred_noise: [tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([287], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([245], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([284], device='cuda:0'), tensor([281], device='cuda:0'), tensor([333], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([333], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([284], device='cuda:0'), tensor([283], device='cuda:0'), tensor([377], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0')]
y_pred_semantic: [tensor([285], device='cuda:0'), tensor([384], device='cuda:0'), tensor([287], device='cuda:0'), tensor([285], device='cuda:0'), tensor([287], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([284], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([287], device='cuda:0'), tensor([331], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([377], device='cuda:0'), tensor([169], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([261], device='cuda:0'), tensor([283], device='cuda:0'), tensor([384], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0')]
y_pred_l1: [tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([264], device='cuda:0'), tensor([284], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([284], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([169], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([283], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([333], device='cuda:0'), tensor([283], device='cuda:0'), tensor([281], device='cuda:0'), tensor([282], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([283], device='cuda:0'), tensor([284], device='cuda:0'), tensor([283], device='cuda:0'), tensor([285], device='cuda:0'), tensor([281], device='cuda:0'), tensor([281], device='cuda:0'), tensor([285], device='cuda:0'), tensor([285], device='cuda:0')]
y_pred_spsa: []
time: [0.03099799156188965, 0.6530060768127441, 0.005997180938720703, 0.005999088287353516, 0.26999974250793457, 0.03151559829711914, 0.7966876029968262, 0.012001276016235352, 0.009482622146606445, 0.2981548309326172, 0.030001163482666016, 0.6974899768829346, 0.006999969482421875, 0.0069959163665771484, 0.27055788040161133, 0.03000020980834961, 0.676774263381958, 0.007001161575317383, 0.005998134613037109, 0.2711038589477539, 0.03000164031982422, 0.678722620010376, 0.007000923156738281, 0.0070002079010009766, 0.2731194496154785, 0.029999732971191406, 0.6727302074432373, 0.0070073604583740234, 0.006511211395263672, 0.26946306228637695, 0.03001856803894043, 0.6711857318878174, 0.006999969482421875, 0.006506681442260742, 0.27013182640075684, 0.03100275993347168, 0.6747682094573975, 0.007000923156738281, 0.0070018768310546875, 0.27957630157470703, 0.028999805450439453, 0.6320009231567383, 0.0070002079010009766, 0.005999088287353516, 0.26800060272216797, 0.03199934959411621, 0.6862905025482178, 0.00700068473815918, 0.00599980354309082, 0.2766294479370117, 0.030511140823364258, 0.6777410507202148, 0.006998777389526367, 0.007001399993896484, 0.27312183380126953, 0.029000043869018555, 0.6591095924377441, 0.0070002079010009766, 0.006001710891723633, 0.2670004367828369, 0.03999948501586914, 0.7869997024536133, 0.011001110076904297, 0.010999917984008789, 0.3569982051849365, 0.0315089225769043, 0.7066476345062256, 0.00699925422668457, 0.0060002803802490234, 0.29560112953186035, 0.029000520706176758, 0.6325130462646484, 0.007001161575317383, 0.006999492645263672, 0.265000581741333, 0.029000282287597656, 0.642000675201416, 0.007000446319580078, 0.006999969482421875, 0.26903295516967773, 0.029999732971191406, 0.7350294589996338, 0.007999420166015625, 0.005999565124511719, 0.30100011825561523, 0.028999805450439453, 0.6649990081787109, 0.006999969482421875, 0.008001089096069336, 0.32199740409851074, 0.028999805450439453, 0.6725485324859619, 0.006998300552368164, 0.009000539779663086, 0.30104970932006836, 0.03099846839904785, 0.7725846767425537, 0.007001399993896484, 0.005998849868774414, 0.30500078201293945, 0.03499865531921387, 0.7560749053955078, 0.009002447128295898, 0.0069997310638427734, 0.36262011528015137, 0.04499983787536621, 0.8211333751678467, 0.007998466491699219, 0.008002042770385742, 0.33403968811035156, 0.0370020866394043, 0.7450830936431885, 0.00799870491027832, 0.009998798370361328, 0.3130018711090088, 0.0489957332611084, 0.8070018291473389, 0.007000446319580078, 0.0070002079010009766, 0.31000256538391113, 0.032001495361328125, 0.6629984378814697, 0.006999969482421875, 0.007002115249633789, 0.285001277923584, 0.030000686645507812, 0.6599986553192139, 0.0070002079010009766, 0.007000446319580078, 0.2819991111755371, 0.0280001163482666, 0.6440303325653076, 0.007001161575317383, 0.0060002803802490234, 0.2689981460571289, 0.028999805450439453, 0.6449999809265137, 0.00700068473815918, 0.005998849868774414, 0.2720005512237549, 0.030000686645507812, 0.6530284881591797, 0.007000446319580078, 0.007000923156738281, 0.28600192070007324, 0.028999805450439453, 0.6839995384216309, 0.006999492645263672, 0.0069997310638427734, 0.2760004997253418, 0.029999256134033203, 0.6669981479644775, 0.0070002079010009766, 0.0060002803802490234, 0.2690134048461914, 0.029999256134033203, 0.637000560760498, 0.00699925422668457, 0.006000518798828125, 0.26599931716918945, 0.029000043869018555, 0.6340007781982422, 0.008000850677490234, 0.006999492645263672, 0.267000675201416, 0.02899909019470215, 0.6290004253387451, 0.007000923156738281, 0.006998538970947266, 0.2680015563964844, 0.029001474380493164, 0.6680002212524414, 0.00699925422668457, 0.00599980354309082, 0.269000768661499, 0.029999732971191406, 0.6599993705749512, 0.00699925422668457, 0.00599980354309082, 0.2780017852783203, 0.032999515533447266, 0.7135226726531982, 0.007001161575317383, 0.00700068473815918, 0.283001184463501, 0.031000137329101562, 0.6809990406036377, 0.0070018768310546875, 0.00700068473815918, 0.27900075912475586, 0.03500032424926758, 0.68399977684021, 0.006999015808105469, 0.00800013542175293, 0.2740004062652588, 0.02899956703186035, 0.7440011501312256, 0.006999492645263672, 0.0070002079010009766, 0.28600072860717773]
funcs_tested: 0
test acc on clean examples (%): 42.50
test acc on FGM adversarial examples (%): 15.00
test acc on PGD adversarial examples (%): 2.50
test acc on L2 adversarial examples (%): 0.00
test acc on HOP-SKIP-JUMP adversarial examples (%): 0.00
test acc on NOISE adversarial examples (%): 42.50
test acc on SEMANTIC adversarial examples (%): 37.50
test acc on L1 adversarial examples (%): 42.50
test acc on SPSA adversarial examples (%): 0.00
